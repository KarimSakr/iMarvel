//
//  HomeInteractor.swift
//  iMarvel
//
//  Created by Karim Sakr on 04/04/2024.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift

protocol HomeBusinessLogic {
    
    func fetchCharacterList(skip:Int, limit:Int, completion: @escaping () -> Void)
    
    func fetchCharacterIfNeeded(index: Int, completion: @escaping () -> Void)
    
    func getCharacters() -> [HomeModels.ViewModels.Character]
    
}

protocol HomeDataStore {
    var characters: [HomeModels.ViewModels.Character] { get set }
}

class HomeInteractor: HomeBusinessLogic, HomeDataStore {
    
    var presenter: HomePresentationLogic?
    
    var characters: [HomeModels.ViewModels.Character] = [HomeModels.ViewModels.Character]()
    
    private var elementsLeft: Int = 0
    
    private var bag = DisposeBag()
    
    func getCharacters() -> [HomeModels.ViewModels.Character] {
        return characters
    }
    
    func fetchCharacterList(skip:Int, limit:Int, completion: @escaping () -> Void) {
        APIClient.shared.request(.fetchCharacterList(skip: skip, limit: limit))
            .subscribe { [weak self] (event:Result<Response<[Character]>, Error>) in
                guard let self = self else { return }
                
                switch event{
                case .success(let data):
                    self.elementsLeft = data.data.total - self.characters.count
                    self.characters.append(contentsOf: self.presenter?.didGetCharacters(data) ?? [])
                    completion()
                case .failure(let error):
                    print(error.localizedDescription)
                }
            }.disposed(by: bag)
    }
    
    func fetchCharacterIfNeeded(index: Int, completion: @escaping () -> Void) {
        guard index == characters.count - 3, elementsLeft != 0 else { return }
        
        fetchCharacterList(skip: characters.count, limit: 20) {
            completion()
        }
    }
}
