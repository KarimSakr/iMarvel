//
//  LoginInteractor.swift
//  iMarvel
//
//  Created by Karim Sakr on 08/04/2024.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift

protocol LoginBusinessLogic {
    func login(request: LoginModels.Request.Login) -> Single<Void>
}

protocol LoginDataStore {
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore {
    var presenter: LoginPresentationLogic?
    var repo: LoginRepositoryProtocol?
    
    
    func login(request: LoginModels.Request.Login) -> Single<Void> {
        return Single.create { [weak self] single in
            guard let self = self else { single(.failure(LoginError.genericError)); return Disposables.create()}
            guard let repo = self.repo else { single(.failure(LoginError.genericError)); return Disposables.create()}
            guard request.isValid() else {
                single(.failure(LoginError.invalidCredentials))
                return Disposables.create()
            }
            
            repo.save()
            single(.success({}()))
            return Disposables.create()
        }
    }
}

enum LoginError: Error {
    case invalidCredentials
    case genericError
}
