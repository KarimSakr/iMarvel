//
//  HomeInteractor.swift
//  iMarvel
//
//  Created by Karim Sakr on 04/04/2024.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift

protocol HomeBusinessLogic {
    
    func fetchCharacterList(skip:Int, limit:Int, completion: @escaping () -> Void)
    
    func fetchCachedCharacterList(completion: @escaping () -> Void)
    
    func fetchCharacterIfNeeded(index: Int, completion: @escaping () -> Void)
    
    func fetchCharactersByName(skip:Int ,limit: Int,name: String, completion: @escaping () -> Void)
    
    func fetchCharacterIfNeeded(withName: String, index: Int, completion: @escaping () -> Void)
    
    func refreshList(completion: @escaping () -> Void)
    
    func getCharacters() -> [HomeModels.ViewModels.Character]
    
    func isUserLoggedIn() -> Bool
    
    func logOut()
    
}

protocol HomeDataStore {
    var characters: [HomeModels.ViewModels.Character] { get set }
}

class HomeInteractor: HomeBusinessLogic, HomeDataStore {
    
    
    var presenter: HomePresentationLogic?
    
    var characters: [HomeModels.ViewModels.Character] = [HomeModels.ViewModels.Character]()
    
    private var elementsLeft: Int = 1
    private var elementsLeftForName: Int = 1 // elements left for when searching by name
    
    private var bag = DisposeBag()
    
    private let db = LocalDatabaseManager.shared
    
    func getCharacters() -> [HomeModels.ViewModels.Character] {
        return characters
    }
    
    func fetchCharacterList(skip:Int, limit:Int, completion: @escaping () -> Void) {
        APIClient.shared.request(.fetchCharacterList(skip: skip, limit: limit))
            .subscribe { [weak self] (event:Result<Response<[Character]>, Error>) in
                guard let self = self else { return }
                guard let presenter = presenter else { return }
                switch event{
                case .success(let data):
                    self.elementsLeft = data.data.total - self.characters.count
                    self.characters.append(contentsOf: presenter.didGetCharacters(data))
                    completion()
                case .failure(let error):
                    presenter.showError(error: error)
                }
            }.disposed(by: bag)
    }
    
    func fetchCharactersByName(skip:Int ,limit: Int,name: String, completion: @escaping () -> Void) {
        APIClient.shared.request(.fetchCharacterListByName(skip: skip, limit: limit, name: name))
            .subscribe { [weak self] (event:Result<Response<[Character]>, Error>) in
                guard let self = self else { return }
                guard let presenter = presenter else { return }
                switch event{
                case .success(let data):
                    if skip == 0 { // check if it is the first entry if searchbar
                        self.characters = []
                    }
                    self.elementsLeftForName = data.data.total - self.characters.count
                    self.characters.append(contentsOf: presenter.didGetNamedCharacters(data))
                    completion()
                case .failure(let error):
                    presenter.showError(error: error)
                }
            }.disposed(by: bag)
    }
    
    func fetchCachedCharacterList(completion: @escaping () -> Void) {
        guard let presenter = presenter else { return }
        
        let cachedCharcter = db.fetch(CharacterCD.self)
        
        characters = presenter.didGetCachedCharacters(cachedCharcter)
        completion()
        
        if characters.isEmpty {
            fetchCharacterList(skip: 0, limit: 20) {
                completion()
            }
        }
    }
    
    func fetchCharacterIfNeeded(index: Int, completion: @escaping () -> Void) {
        guard index == characters.count - 3, elementsLeft != 0 else { return }
        
        fetchCharacterList(skip: characters.count, limit: 20) {
            completion()
        }
    }
    
    func fetchCharacterIfNeeded(withName: String, index: Int, completion: @escaping () -> Void) {
        guard index == characters.count - 3, elementsLeftForName != 0 else { return }
        
        fetchCharactersByName(skip: characters.count, limit: 20, name: withName) {
            completion()
        }
    }
    
    func refreshList(completion: @escaping () -> Void) {
        characters = []
        elementsLeft = 0
        completion()
        fetchCharacterList(skip: 0, limit: 20) {
            completion()
        }
    }
    
    func isUserLoggedIn() -> Bool {
        return Persistence.shared.getData(key: Constants.PersistenceKeys.isUserLoggedIn) as? Bool ?? false
    }
    
    func logOut() {
        Persistence.shared.save(key: Constants.PersistenceKeys.isUserLoggedIn, object: false)
    }
}
