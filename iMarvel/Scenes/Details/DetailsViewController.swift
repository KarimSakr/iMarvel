//
//  DetailsViewController.swift
//  iMarvel
//
//  Created by Karim Sakr on 06/04/2024.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SDWebImage

protocol DetailsDisplayLogic: AnyObject {
    
    func showError(error: Error)
    
}

class DetailsViewController: UIViewController, DetailsDisplayLogic {
    
    var interactor: DetailsBusinessLogic?
    var router: DetailsRouter?
    
    var id: Int?
    
    private let boldFontSize: CGFloat = 20.0
    
    lazy var scrollView: UIScrollView = {
        let scroll = UIScrollView()
        scroll.translatesAutoresizingMaskIntoConstraints = false
        return scroll
    }()
    
    lazy var scrollStackViewContainer: UIStackView = {
        let container = UIStackView()
        container.axis = .vertical
        container.translatesAutoresizingMaskIntoConstraints = false
        return container
    }()
    
    lazy var characterIcon: UIImageView = {
        let imageView = UIImageView()
        imageView.contentMode = .scaleAspectFill
        imageView.tintColor = .white
        imageView.clipsToBounds = true
        imageView.translatesAutoresizingMaskIntoConstraints = false
        imageView.backgroundColor = .secondarySystemBackground
         return imageView
    }()
    
    lazy var idLabel: UILabel = {
        let label = UILabel()
        label.textColor = .secondaryLabel
        label.translatesAutoresizingMaskIntoConstraints = false
        
        return label
    }()
    
    lazy var descriptionLabel: UILabel = {
        let label = UILabel()
        label.textAlignment = .left
        label.translatesAutoresizingMaskIntoConstraints = false
        label.adjustsFontSizeToFitWidth = true
        label.minimumScaleFactor = 0.5
        label.numberOfLines = 0
        return label
    }()
    
    lazy var comicsLabel: UILabel = {
        let label = UILabel()
        label.text = "Comics:"
        label.font = .boldSystemFont(ofSize: boldFontSize)
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    lazy var comicsCollection: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .horizontal
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.backgroundColor = .systemBackground
        
        collectionView.register(CoverCollectionViewCell.self, forCellWithReuseIdentifier: CoverCollectionViewCell.identifier)
        
        collectionView.alwaysBounceHorizontal = true
        collectionView.showsHorizontalScrollIndicator = false
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        return collectionView
    }()
    
    lazy var eventsLabel: UILabel = {
        let label = UILabel()
        label.text = "Events:"
        label.font = .boldSystemFont(ofSize: boldFontSize)
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    lazy var eventsCollection: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .horizontal
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.backgroundColor = .systemBackground
        
        collectionView.register(CoverCollectionViewCell.self, forCellWithReuseIdentifier: CoverCollectionViewCell.identifier)
        
        collectionView.alwaysBounceHorizontal = true
        collectionView.showsHorizontalScrollIndicator = false
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        return collectionView
    }()
    
    lazy var storiesLabel: UILabel = {
        let label = UILabel()
        label.text = "Stories:"
        label.font = .boldSystemFont(ofSize: boldFontSize)
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    lazy var storiesCollection: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .horizontal
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.backgroundColor = .systemBackground
        
        collectionView.register(CoverCollectionViewCell.self, forCellWithReuseIdentifier: CoverCollectionViewCell.identifier)
        
        collectionView.alwaysBounceHorizontal = true
        collectionView.showsHorizontalScrollIndicator = false
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        return collectionView
    }()
    
    lazy var seriesLabel: UILabel = {
        let label = UILabel()
        label.text = "Series:"
        label.font = .boldSystemFont(ofSize: boldFontSize)
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    lazy var seriesCollection: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .horizontal
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.backgroundColor = .systemBackground
        
        collectionView.register(CoverCollectionViewCell.self, forCellWithReuseIdentifier: CoverCollectionViewCell.identifier)
        
        collectionView.alwaysBounceHorizontal = true
        collectionView.showsHorizontalScrollIndicator = false
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        return collectionView
    }()
    
}

// MARK: View lifecycle
extension DetailsViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setup()
        addSubviews()
        setupDelegatesAndDataSource()
        view.backgroundColor = .systemBackground
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        
        let iconSize = view.width / 3
        
        NSLayoutConstraint.activate([
            
            // characterIcon constraints
            characterIcon.widthAnchor.constraint(equalToConstant: iconSize),
            characterIcon.heightAnchor.constraint(equalToConstant: iconSize),
            characterIcon.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 5),
            characterIcon.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 5),
            
            // idLabel constraints
            idLabel.leadingAnchor.constraint(equalTo: characterIcon.trailingAnchor, constant: 5),
            idLabel.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 5),
            
            // descriptionLabel constraints
            descriptionLabel.topAnchor.constraint(equalTo: characterIcon.bottomAnchor, constant: 10),
            descriptionLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 5),
            descriptionLabel.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: 5),
            
            // scrollView constraints
            scrollView.topAnchor.constraint(equalTo: descriptionLabel.bottomAnchor, constant: 20),
            scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            
            // scrollView constraints
            scrollStackViewContainer.topAnchor.constraint(equalTo: scrollView.contentLayoutGuide.topAnchor),
            scrollStackViewContainer.bottomAnchor.constraint(equalTo: scrollView.contentLayoutGuide.bottomAnchor),
            scrollStackViewContainer.leadingAnchor.constraint(equalTo: scrollView.contentLayoutGuide.leadingAnchor),
            scrollStackViewContainer.trailingAnchor.constraint(equalTo: scrollView.contentLayoutGuide.trailingAnchor),
            scrollStackViewContainer.widthAnchor.constraint(equalTo: scrollView.frameLayoutGuide.widthAnchor),
            
            // comicsLabel constraints
            comicsLabel.leadingAnchor.constraint(equalTo: scrollStackViewContainer.leadingAnchor, constant: 5),
            comicsLabel.topAnchor.constraint(equalTo: scrollStackViewContainer.topAnchor, constant: 20),
            
            // comicsCollection constraints
            comicsCollection.topAnchor.constraint(equalTo: comicsLabel.bottomAnchor, constant: 5),
            comicsCollection.leadingAnchor.constraint(equalTo: scrollStackViewContainer.leadingAnchor),
            comicsCollection.trailingAnchor.constraint(equalTo: scrollStackViewContainer.trailingAnchor),
            comicsCollection.heightAnchor.constraint(equalToConstant: 210),
            
            // eventsLabel constraints
            eventsLabel.leadingAnchor.constraint(equalTo: scrollStackViewContainer.leadingAnchor, constant: 5),
            eventsLabel.topAnchor.constraint(equalTo: comicsCollection.bottomAnchor, constant: 20),
            
            // eventsCollection constraints
            eventsCollection.topAnchor.constraint(equalTo: eventsLabel.bottomAnchor, constant: 5),
            eventsCollection.leadingAnchor.constraint(equalTo: scrollStackViewContainer.leadingAnchor),
            eventsCollection.trailingAnchor.constraint(equalTo: scrollStackViewContainer.trailingAnchor),
            eventsCollection.heightAnchor.constraint(equalToConstant: 210),
            
            // storiesLabel constraints
            storiesLabel.leadingAnchor.constraint(equalTo: scrollStackViewContainer.leadingAnchor, constant: 5),
            storiesLabel.topAnchor.constraint(equalTo: eventsCollection.bottomAnchor, constant: 20),
            
            // storiesCollection constraints
            storiesCollection.topAnchor.constraint(equalTo: storiesLabel.bottomAnchor, constant: 5),
            storiesCollection.leadingAnchor.constraint(equalTo: scrollStackViewContainer.leadingAnchor),
            storiesCollection.trailingAnchor.constraint(equalTo: scrollStackViewContainer.trailingAnchor),
            storiesCollection.heightAnchor.constraint(equalToConstant: 210),
            
            // seriesLabel constraints
            seriesLabel.leadingAnchor.constraint(equalTo: scrollStackViewContainer.leadingAnchor, constant: 5),
            seriesLabel.topAnchor.constraint(equalTo: storiesCollection.bottomAnchor, constant: 20),
            
            // seriesCollection constraints
            seriesCollection.topAnchor.constraint(equalTo: seriesLabel.bottomAnchor, constant: 5),
            seriesCollection.leadingAnchor.constraint(equalTo: scrollStackViewContainer.leadingAnchor),
            seriesCollection.trailingAnchor.constraint(equalTo: scrollStackViewContainer.trailingAnchor),
            seriesCollection .heightAnchor.constraint(equalToConstant: 210),
        ])
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        interactor?.fetchDetails(id: id!) {
            guard let character = self.interactor?.getCharacter() else { return }
            self.idLabel.text = character.id
            self.descriptionLabel.text = character.desription
            self.characterIcon.sd_setImage(with: URL(string: character.thumbnailUrl),
                                           placeholderImage: nil,
                                           options: [.scaleDownLargeImages])
        }
        
        interactor?.fetchComics(id: id!, completion: {
            self.comicsCollection.reloadData()
        })
        
        interactor?.fetchEvents(id: id!, completion: {
            self.eventsCollection.reloadData()
        })
        
        interactor?.fetchSeries(id: id!, completion: {
            self.seriesCollection.reloadData()
        })
        
        interactor?.fetchStories(id: id!, completion: {
            self.storiesCollection.reloadData()
        })
    }
}

//MARK: - setup
extension DetailsViewController {
    
    private func setup() {
        let viewController = self
        let interactor = DetailsInteractor()
        let presenter = DetailsPresenter()
        let router = DetailsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    private func addSubviews() {
        view.addSubview(characterIcon)
        view.addSubview(idLabel)
        view.addSubview(descriptionLabel)
        view.addSubview(scrollView)
        scrollView.addSubview(scrollStackViewContainer)
//        scrollStackViewContainer.addArrangedSubview(characterIcon)
//        scrollStackViewContainer.addArrangedSubview(idLabel)
//        scrollStackViewContainer.addArrangedSubview(descriptionLabel)
        scrollStackViewContainer.addArrangedSubview(comicsLabel)
        scrollStackViewContainer.addArrangedSubview(comicsCollection)
        scrollStackViewContainer.addArrangedSubview(eventsLabel)
        scrollStackViewContainer.addArrangedSubview(eventsCollection)
        scrollStackViewContainer.addArrangedSubview(storiesLabel)
        scrollStackViewContainer.addArrangedSubview(storiesCollection)
        scrollStackViewContainer.addArrangedSubview(seriesLabel)
        scrollStackViewContainer.addArrangedSubview(seriesCollection)
    }
    
    private func setupDelegatesAndDataSource() {
        comicsCollection.delegate = self
        eventsCollection.delegate = self
        storiesCollection.delegate = self
        seriesCollection.delegate = self
        
        comicsCollection.dataSource = self
        eventsCollection.dataSource = self
        storiesCollection.dataSource = self
        seriesCollection.dataSource = self
    }
}

extension DetailsViewController {
    func showError(error: Error) {
        AppSnackBar.make(in: self.view, message: "Something went wrong", duration: .lengthShort).show()
    }
}

//MARK: - UICollectionViewDelegate | UICollectionViewDelegate
extension DetailsViewController: UICollectionViewDelegate, UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        switch collectionView {
            case comicsCollection:
                return interactor?.getComics().count ?? 0
            case seriesCollection:
                return interactor?.getSeries().count ?? 0
            case eventsCollection:
                return interactor?.getEvents().count ?? 0
            case storiesCollection:
                return interactor?.getStories().count ?? 0
            default:
                return 0
            }
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        var cell: CoverCollectionViewCell!
        
        switch collectionView {
            
        case comicsCollection:
            cell = collectionView.dequeueReusableCell(withReuseIdentifier: CoverCollectionViewCell.identifier, for: indexPath) as? CoverCollectionViewCell
            
            cell.configure(url: interactor?.getComics()[indexPath.item].thumbnailUrl ?? "", title: interactor?.getComics()[indexPath.item].title ?? "")
            
        case seriesCollection:
            cell = collectionView.dequeueReusableCell(withReuseIdentifier: CoverCollectionViewCell.identifier, for: indexPath) as? CoverCollectionViewCell
            cell.configure(url: interactor?.getSeries()[indexPath.item].thumbnailUrl ?? "", title: interactor?.getSeries()[indexPath.item].title ?? "")
            
        case eventsCollection:
            cell = collectionView.dequeueReusableCell(withReuseIdentifier: CoverCollectionViewCell.identifier, for: indexPath) as? CoverCollectionViewCell
            cell.configure(url: interactor?.getEvents()[indexPath.item].thumbnailUrl ?? "",title: interactor?.getEvents()[indexPath.item].title ?? "")
            
        case storiesCollection:
            cell = collectionView.dequeueReusableCell(withReuseIdentifier: CoverCollectionViewCell.identifier, for: indexPath) as? CoverCollectionViewCell
            cell.configure(url: interactor?.getStories()[indexPath.item].thumbnailUrl ?? "",title: interactor?.getStories()[indexPath.item].title ?? "")
        default:
            cell = collectionView.dequeueReusableCell(withReuseIdentifier: CoverCollectionViewCell.identifier, for: indexPath) as? CoverCollectionViewCell
        }
        
        return cell
        
    }
    
}

//MARK: - UICollectionViewDelegateFlowLayout
extension DetailsViewController: UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        
        return CGSize(width: 140, height: 200)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 20
    }
}
