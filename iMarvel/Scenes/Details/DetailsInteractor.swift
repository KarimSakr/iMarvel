//
//  DetailsInteractor.swift
//  iMarvel
//
//  Created by Karim Sakr on 06/04/2024.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift
protocol DetailsBusinessLogic {
    func fetchDetails(id: Int, completion: @escaping () -> Void)
    
    func getCharacter() -> DetailsModels.ViewModels.Character
}

protocol DetailsDataStore {
    var character: DetailsModels.ViewModels.Character { get set}
}

class DetailsInteractor: DetailsBusinessLogic, DetailsDataStore {
    var presenter: DetailsPresentationLogic?
    
    private var bag = DisposeBag()
    
    var character = DetailsModels.ViewModels.Character(name: "", id: "", thumbnailUrl: "", desription: "")
    
    func fetchDetails(id: Int, completion: @escaping () -> Void) {
        APIClient.shared.request(.fetchDetails(id: id))
            .subscribe { [weak self] (event:Result<Response<[Character]>,Error>) in
                guard let self = self else { return }
                guard let presenter = presenter else { return }
                switch event {
                case .success(let model):
                    character = presenter.didGetCharacters(model)
                    completion()
                case .failure(let error):
                    break // handle error
                }
            }.disposed(by: bag)
    }
    
    func getCharacter() -> DetailsModels.ViewModels.Character {
        return character
    }
}
